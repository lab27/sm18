/*
 * General Mixins
 */

/*
 * Hide visually
 * See http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 * for discussion of different solutions
 */
@mixin visually-hidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

@mixin visually-hidden-reset() {
  position: static;
  width: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  clip: auto;
}

@mixin visually-hidden-focusable() {
  @include visually-hidden;

  &:focus,
  &:active {
    @include visually-hidden-reset;
  }
}

/*
 * Contain floats with clearfix
 *
 * http://nicolasgallagher.com/micro-clearfix-hack/
 */
@mixin clearfix() {
  &:before,
  &:after {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}

/*
 * Lists with layout purpose
 */
@mixin reset-list() {
  padding: 0;
  margin: 0;
  list-style: none;
}

/*
 * Select dropdown element reset default appearance
 */
@mixin reset-select() {
  display: block;
  width: 100%;
  cursor: pointer;
  background: none;
  border: 0;
  border-radius: 0;
  box-shadow: none;
  appearance: none;
}

/*
 * Replace text
 */
@mixin replace-text() {
  display: block;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

/*
 * Select dropdown element reset default appearance
 */
@mixin reset-select() {
  display: block;
  width: 100%;
  cursor: pointer;
  background: none;
  border: 0;
  border-radius: 0;
  box-shadow: none;
  appearance: none;
}

/*
 * Set Ellipsis
 */
@mixin set-ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/*!
 * Hocus Focus
 */
@mixin hocus-focus($type: bgcolor, $color: $s-color-primary) {
  @if $type == bgcolor {
    // transition: all 0.25s ease-in-out;

    &:focus {
      outline: none;
    }

    &:hover,
    &:active {
      background-color: $color;
    }

    [data-whatinput='keyboard'] &:focus {
      background-color: $color;
    }
  } @elseif $type == textcolor {
    // transition: all 0.25s ease-in-out;

    &:focus {
      outline: none;
    }

    &:hover,
    &:active {
      color: $color;
    }

    [data-whatinput='keyboard'] &:focus {
      // color: $color;
      outline: 1px solid $color;
      outline-offset: 10px;
    }
  }
}

/*
 * Reset Link
 */
@mixin reset-link() {
  color: $s-color-text-default;
  cursor: pointer;

  &:hover {
    color: $s-color-primary;
  }
}


/*
 * Define different component max widths
 * Also check sketch file for further visual information
 * @Params: small | medium | large | full-width
 */

@mixin set-gutter($size: 'small') {
  // small is mainly for paragraphs and is calculated from font-size
  @if ($size == 'small') {
    width: 100%;
    padding: 0 px-to-rem($s-size-gutter-small);

    @include mq($from: medium) {
      padding: 0 px-to-rem($s-size-gutter-medium);
      max-width: px-to-rem($s-size-content-max-width-small + 2 * ($s-size-gutter-medium));
      margin-left: auto;
      margin-right: auto;
    }
  } @else if ($size == 'medium') {
    width: 100%;
    padding: 0 px-to-rem($s-size-gutter-small);

    @include mq($from: medium) {
      padding: 0 px-to-rem($s-size-gutter-medium);
      max-width: px-to-rem($s-size-content-max-width-medium + 2 * ($s-size-gutter-medium));
      margin-left: auto;
      margin-right: auto;
    }
  } @else if ($size == 'large') {
    width: 100%;
    padding: 0 px-to-rem($s-size-gutter-small);

    @include mq($from: medium) {
      padding: 0 px-to-rem($s-size-gutter-medium);
      max-width: px-to-rem($s-size-content-max-width-large + 2 * ($s-size-gutter-medium));
      margin-left: auto;
      margin-right: auto;
    }
  } @else if ($size == 'full-width') {
    width: 100%;
    max-width: 100%;
    padding: 0;

    @include mq($from: medium) {
      width: 100%;
      max-width: 100%;
      padding: 0;
    }
  }
}
